import argparse
from sklearn.metrics import confusion_matrix
from sklearn_crfsuite.metrics import flat_classification_report
import json
from tqdm import tqdm

parser = argparse.ArgumentParser(description="Generate a conll file from the various jsonlines output files generated by the neural network")
parser.add_argument("--morph-file", dest="morph_file", type=str,
                    help="The path to the mophological tag predictions file from allennlp")
parser.add_argument("--hel-pos-file", dest="hel_pos_file", type=str,
                    help="The path to the helsink pos tag predictions file from allennlp")
parser.add_argument("--pos-file", dest="pos_file", type=str,
                    help="The path to the UD pos tag predictions file from allennlp")
parser.add_argument("--func-file", dest="func_file", type=str,
                    help="The path to the functional tag predictions file from allennlp")
parser.add_argument("--out-file", dest="out_file", type=str)

args = parser.parse_args()


def tags_from_json_lines(filepath):
    """
    Obtain tags from the json lines input file
    """
    predictions = []
    with open(filepath) as in_file:
        for line in tqdm(in_file):
            res_tags = json.loads(line)["tags"]
            predictions.append(res_tags)

    return predictions

def words_from_json_lines(filepath):
    """
    Obtain words from the json lines input file
    """
    predictions = []
    with open(filepath) as in_file:
        for line in tqdm(in_file):
            res_tags = json.loads(line)["words"]
            predictions.append(res_tags)

    return predictions

print("Loading morphological information")
morph_tags = tags_from_json_lines(args.morph_file)
print("Loading functional tags")
func_tags = tags_from_json_lines(args.func_file)
print("Loading universal dependencies pos tags")
ud_pos = tags_from_json_lines(args.pos_file)
print("Loading helsinki pos tags")
hel_pos = tags_from_json_lines(args.hel_pos_file)
print("Loading words")
words = words_from_json_lines(args.hel_pos_file)
with open(args.out_file, "w") as of:
    for i in tqdm(range(len(words))):
        for j in range(len(words[i])):
            dump_str = (str(j) + "\t" + words[i][j] + "\t" + "_" + "\t" +
                       ud_pos[i][j] + "\t" + hel_pos[i][j] + "\t" + 
                       morph_tags[i][j] + "\t" + "_" + "\t" + "_" + "\t" + 
                       "_" + "\t" + func_tags[i][j])
            of.write(dump_str + "\n")
            
        of.write("\n")
